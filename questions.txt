Johnny Gaddis
CSCI 305 Prolog Lab

1.  X = 'King George VI'.

2.  X = 'Queen Mary'.

3.  X = 'King George V' .

4.  X = 'King George V' ;
    X = 'Queen Mary'.

5.  X = 'Prince William' ;
    X = 'Prince Henry'.

6.  X = 'Princess Margaret' ;

7.  X = 'Prince Charles' ;
    X = 'Prince Andrew' ;
    X = 'Prince Edward'.

8.  X = 'Princess Anne'.

9.  false

10. X = 'Catherine Middleton'.

11. X = 'Prince Charles' ;
    X = 'Lady Diana Spencer' ;
    X = 'Queen Elizabeth II' ;
    X = 'Prince Philip' ;
    X = 'King George VI' ;
    X = 'Lady Elizabeth Bowes-Lyon' ;
    X = 'King George V' ;
    X = 'Queen Mary' ;
    X = 'King Edward VII' ;
    X = 'Princess Alexandra of Denmark' ;
    X = 'Prince Albert' ;
    X = 'Queen Victoria'.

12. false

13. false

14. false

15. X = 'King George V'.

16. I like the way prolog parses data fast and accurately. It seems useful for large database files. I also like how the extraction of data can functional.

17. The syntax in prolog makes my head hurt. I don't like the usage of the ? and the :- in the code and execution. I don't think they put a lot of effort into matching what everyone wants out of a language.

18. I liked the practical aspect of finding information from a large data file using functions and the history of British royalty added some extra entertainment.

19. 2 hours.

20. I would use this language again for large database systems.

EC1.  X = 'Viscount Linley' ;
      X = 'Lady Sarah Chatto'.

EC2.  X = 'Viscount Linley' ;
      X = 'Lady Sarah Chatto'.
